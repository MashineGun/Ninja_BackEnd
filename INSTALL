== SSH into the Block:
ssh ubuntu@IP_OF_THE_BLOCK
== default password:
temppwd
== [RECOMMENDED] Change password using this command if still using default password:
passwd

== Sudo:
sudo -s
== Update Ubuntu:
sudo apt-get update
== Create Permanent log folder:
cd /var/
mkdir log-perm
cd log-perm
mkdir nginx
cd nginx
touch error.log
touch access.log
== Install NginX:
sudo apt-get install nginx -y
cd /etc/nginx
sudo cp nginx.conf nginx.conf.backup
sudo rm nginx.conf
sudo touch nginx.conf
sudo nano nginx.conf
== Copy NginX config data in the file:

user www-data;

# As a thumb rule: One per CPU. If you are serving a large amount
# of static files, which requires blocking disk reads, you may want
# to increase this from the number of cpu_cores available on your
# system.
#
# The maximum number of connections for Nginx is calculated by:
# max_clients = worker_processes * worker_connections
worker_processes 1;

# Maximum file descriptors that can be opened per process
# This should be > worker_connections
worker_rlimit_nofile 8192;

events {
	# When you need > 8000 * cpu_cores connections, you start optimizing
	# your OS, and this is probably the point at where you hire people
	# who are smarter than you, this is *a lot* of requests.
	worker_connections 8000;
}

error_log /var/log-perm/nginx/error.log;

pid /var/run/nginx.pid;

http {
	charset utf-8;

	# Set the mime-types via the mime.types external file
	include mime.types;

	# And the fallback mime-type
	default_type application/octet-stream;

	# Click tracking!
	access_log /var/log-perm/nginx/access.log;

	# Hide nginx version
	server_tokens off;

	# ~2 seconds is often enough for HTML/CSS, but connections in
	# Nginx are cheap, so generally it's safe to increase it
	keepalive_timeout 20;

	# You usually want to serve static files with Nginx
	sendfile on;

	tcp_nopush on; # off may be better for Comet/long-poll stuff
	tcp_nodelay off; # on may be better for Comet/long-poll stuff

	server_name_in_redirect off;
	types_hash_max_size 2048;

	gzip on;
	gzip_http_version 1.0;
	gzip_comp_level 5;
	gzip_min_length 512;
	gzip_buffers 4 8k;
	gzip_proxied any;
	gzip_types
		# text/html is always compressed by HttpGzipModule
		text/css
		text/plain
		text/x-component
		application/javascript
		application/json
		application/xml
		application/xhtml+xml
		application/x-font-ttf
		application/x-font-opentype
		application/vnd.ms-fontobject
		image/svg+xml
		image/x-icon;

	# This should be turned on if you are going to have pre-compressed copies (.gz) of
	# static files available. If not it should be left off as it will cause extra I/O
	# for the check. It would be better to enable this in a location {} block for
	# a specific directory:
	# gzip_static on;

	gzip_disable "msie6";
	gzip_vary on;
	
	# Upstream to abstract backend connection(s) for PHP
	upstream php {
		server unix:/tmp/php5-fpm.sock;
	}

	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;
}

== Edit site settings:
sudo cp sites-available/default sites-available/default.backup
sudo rm sites-available/default
sudo touch sites-available/default
sudo nano sites-available/default

== Copy in the setting file this:

server {
        listen 8010 default; ## listen for ipv4; this line is default and implied
        listen [::]:8010 default ipv6only=on; ## listen for ipv6

        # Make site accessible from http://localhost/
        server_name localhost;
        server_name_in_redirect off;

        charset utf-8;

        access_log      /usr/share/nginx/access.log;
        error_log       /usr/share/nginx/error.log;

        root /usr/share/nginx/www;
        index index.php index.html index.htm;

        location / {
                # First attempt to serve request as file, then
                # as directory, then trigger 404
                try_files $uri $uri/ =404;

                server_name_in_redirect off;
        }

        location /inc {
                deny all;
                allow 127.0.0.1;
                return 403;
        }

        # pass the PHP scripts to FPM socket
        #
        location ~ \.php$ {
                try_files $uri =404;

                fastcgi_split_path_info ^(.+\.php)(/.+)$;
                # NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini

                fastcgi_pass unix:/var/run/php5-fpm.sock;
                fastcgi_index index.php;

                fastcgi_param SCRIPT_FILENAME   /usr/share/nginx/www$fastcgi_script_name;
                fastcgi_param DOCUMENT_ROOT     /usr/share/nginx/www;

                # send bad requests to 404
                fastcgi_intercept_errors on;

                include fastcgi_params;
        }
}

== Reload NginX:
sudo service nginx reload
== Install MySQL:
sudo apt-get install mysql-server mysql-client -y
== [RECOMMENDED] Run the following command and adjust to your needs
sudo mysql_secure_installation
== Install PHP5 Modules:
sudo apt-get install php5-fpm php5-cli php5-mysql php5-curl -y
== Use PHP-FPM php.ini config file by running those commands
cd /etc/php5/cli
sudo mv php.ini php.ini.backup
sudo ln -s ../fpm/php.ini
== [OPTIONAL] Install PHPmyadmin: PRESS ESC WHEN ASK WHICH TYPE OF SERVER TO INSTALL FOR (apache2 or lighttp)
sudo apt-get install phpmyadmin -y
== [PHPMYADMIN] then run this:
sudo ln -s /usr/share/phpmyadmin /usr/share/nginx/www/phpmyadmin
== Edit this file:
nano /etc/php5/fpm/pool.d/www.conf
== Change the “listen” line (the one with 127.0.0.1) with this:
listen = /var/run/php5-fpm.sock
== Restart NginX:
sudo service nginx restart

== Configure MySQL:
mysql -u root -p
== Create a mysql database:
CREATE DATABASE ninja;
== Create Web App User:
GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES ON ninja.* TO '[CHOOSE A USER]'@'localhost' IDENTIFIED BY '[CHOOSE A PASSWORD]';
== Quit MySQL console:
quit;
== Configure SQL timezone:
mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u root -p mysql
== Configure MySQL:
mysql -u root -p
== Set right timezone: (adjust to your needs and check the brackets)
SET time_zone = 'Europe/Paris';
== Quit MySQL console:
quit;

== Authorize Ubuntu to edit file in the www directory:
chown ubuntu /usr/share/nginx/www

== Do the right forwarding of port 8010 to you block IP in your router

== Instal Request for Node.js:
cd /opt/ninja/
npm install request

== Import ninja.sql file in the ninja database
== Edit the inc/db.php file with the right database credentials
== Edit the inc/functions.php with your email settings
== Copy site content to /usr/share/nginx/www and remove other files
== Edit /opt/ninja/app/client/index.js with the content of the index.js in the root folder: in the dataHandler function: check that the API token match what you put in the database for the admin
== Install cron for ubuntu user (not root) by adding this line (running every 10min)
*/10 * * * * /usr/bin/php /usr/share/nginx/www/inc/cron.php &> /dev/null
== Reboot your block
== Go in your brower to the block IP on port 8010
== Login: admin Password: password